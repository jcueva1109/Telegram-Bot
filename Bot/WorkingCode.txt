using System;
using Telegram.Bot;
using Telegram.Bot.Args;

//Programa del bot con comandos predeterminados
namespace Awesome {
  class Program {
    static ITelegramBotClient botClient;

    static void Main() {
      botClient = new TelegramBotClient("1073045363:AAGj36rMsGOP_DfyxMUC-ihNeEjCaA_ra3M");

      var me = botClient.GetMeAsync().Result;
      Console.WriteLine(
        $"Hola Mundo! Soy el usuario {me.Id} y me llamo {me.FirstName}."
      );

      botClient.OnMessage += Bot_OnMessage;
      botClient.StartReceiving();

      Console.WriteLine("Press any key to exit");
      Console.ReadKey();

      botClient.StopReceiving();
    }

    static async void Bot_OnMessage(object sender, MessageEventArgs e) {
      if (e.Message.Text != null)
      {
        Console.WriteLine($"Received a text message in chat {e.Message.Chat.Id}.");

        if (e.Message.Text == "Hola!" || e.Message.Text == "Hola" || e.Message.Text == "Hey"){

            //General Response
            await botClient.SendTextMessageAsync(
                chatId: e.Message.Chat,
                text:   "Hasta Pronto!"
            );

        }

        if (e.Message.Text == "Adios!" || e.Message.Text == "Adios"){

            //General Response
            await botClient.SendTextMessageAsync(
                chatId: e.Message.Chat,
                text:   "Hasta Pronto!"
            );

        }

        if (e.Message.Text == "Muestrame una imagen"){

            //Send a sticker
            await botClient.SendPhotoAsync(
                chatId:  e.Message.Chat,
                photo: "https://github.com/TelegramBots/book/raw/master/src/docs/photo-ara.jpg",
                caption: "<b>Ara bird</b>. <i>Source</i>: <a href=\"https://pixabay.com\">Pixabay</a>"
            );

        }

        if (e.Message.Text == "Muestrame un sticker"){

            //Send a sticker
            await botClient.SendStickerAsync(
                chatId:  e.Message.Chat,
                sticker: "https://github.com/TelegramBots/book/raw/master/src/docs/sticker-dali.webp"
            );

        }

        if (e.Message.Text == "Cool Giraffe"){

            //Send a sticker
            await botClient.SendStickerAsync(
                chatId:  e.Message.Chat,
                sticker: "https://github.com/TelegramBots/book/raw/master/src/docs/sticker-fred.webp"
            );

        }

        if (e.Message.Text == "Muestrame un video"){

            //Send a video
            await botClient.SendVideoAsync(
                chatId:  e.Message.Chat,
                video: "https://github.com/TelegramBots/book/raw/master/src/docs/video-bulb.mp4"
            );

        }

        if (e.Message.Text == "Muestrame un audio"){ 

            await botClient.SendAudioAsync(
                e.Message.Chat,
                "https://github.com/TelegramBots/book/raw/master/src/docs/audio-guitar.mp3"
                /* ,
                performer: "Joel Thomas Hunger",
                title: "Fun Guitar and Ukulele",
                duration: 91 // in seconds
                */
            );

        }

      }
    }
  }
}

//Codigo para mostrar los Inline Keyboard Buttons
if (e.Message.Text == "/start"){

          var BotonesHYD = new InlineKeyboardMarkup(new[]{
              new []{   //Fila nueva
                InlineKeyboardButton.WithCallbackData(    //Columna nueva
                  text:"Días de Circulación",
                  callbackData: "Circulacion"),
                  InlineKeyboardButton.WithCallbackData(    //Columna nueva
                    text:"Auto Evaluate",
                    callbackData: "AutoEvaluate")
              },
              new []{   //Fila nueva
                InlineKeyboardButton.WithUrl(             //Columna nueva
                  text:"Estadísticas",
                  url: "https://www.google.com/search?q=coronavirus+statistics&oq=coronavirus+st&aqs=chrome.0.0i67j69i57j0l6.6211j0j4&sourceid=chrome&ie=UTF-8"),
                InlineKeyboardButton.WithCallbackData(
                  text:"Como prevenir el COVID-19?",
                  callbackData: "prevenir")
              },
              new[]{
                InlineKeyboardButton.WithCallbackData(
                  text:"Que puedo hacer?",
                  callbackData:"/help")
              }
          });

await botClient.SendTextMessageAsync(e.Message.Chat.Id,"Bienvenid@ al BOT COVID19HN \n Selecciona el comando a ejecutar",replyMarkup: BotonesHYD);

//Codigo de BotOnCallbackQueryRecieved
    static async Task BotOnCallbackQueryRecieved(object sender, CallbackQueryEventArgs callbackQueryEventArgs){

      var callbackQuery = callbackQueryEventArgs.CallbackQuery;

        //Este es el popup que le muestra al usuario
        await botClient.AnswerCallbackQueryAsync(
          callbackQueryId: callbackQuery.Id,
          text: $"Received {callbackQuery.Data}"
        );
        
        Console.WriteLine($"Selecciono: {callbackQuery.Data}");


        //Si descomento esto, el bot envia un mensaje con Received callbackQuery.Data
        await botClient.SendTextMessageAsync(
          chatId: callbackQuery.Message.Chat.Id,
          text: $"Received {callbackQuery.Data}"
        );

    }

//Cuestionario
var rkm = new ReplyKeyboardMarkup();


      rkm.Keyboard = new KeyboardButton[][]{
        new KeyboardButton[]{
          new KeyboardButton("Sí"),
          new KeyboardButton("No")
        }
      };

      await botClient.SendTextMessageAsync(callbackQuery.Message.Chat.Id, "Tienes fiebre?", replyMarkup: rkm);

public static async void BotOnCallbackQueryRecieved(object sender, CallbackQueryEventArgs callbackQueryEventArgs)
        {

var callbackQuery = callbackQueryEventArgs.CallbackQuery;

            Console.WriteLine($"botCliente>> El usuario selecciono {callbackQuery.Data}");




//Preguntas con el teclado incorporado

    static async void TerceraPregunta(CallbackQuery callbackQuery){

      var respuestas = new InlineKeyboardMarkup(new []{

       new[]{
         InlineKeyboardButton.WithCallbackData(
           text: "Sí",
           callbackData: "si"
         ),
         InlineKeyboardButton.WithCallbackData(
            text: "No",
            callbackData: "no"
         )
       }

     });

      // await botClient.SendTextMessageAsync(
      //   chatId: callbackQuery.Message.Chat.Id,
      //   text: "¿Has tenido contacto directo con una persona diagnosticada con COVID-19?",
      //   replyMarkup: replyKeyboardMarkup
      // );
      // CuartaPregunta(callbackQuery);
    }